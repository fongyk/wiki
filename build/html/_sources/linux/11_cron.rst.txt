cron
===========

cron 用于定时任务调度（Job Scheduler）。

.. highlight:: bash
    :linenothreshold: 2

cron 表达式
---------------

cron 表达式是一个字符串，分为 6 或 7 个域，每两个域之间用空格分隔，其语法格式为::

    秒域 分域 时域 天域 月域 周域 年域

其中年域可以省略，省略时表示“每年”。

.. table:: 域和取值范围、可用符号
    :align: center

    ============ ============================= ======================
    域            取值范围                        可用符号
    ============ ============================= ======================
    秒域           0 - 59                       ``*`` ``-`` ``,`` ``/``
    分域           0 - 59                       ``*`` ``-`` ``,`` ``/``
    时域           0 - 23                       ``*`` ``-`` ``,`` ``/``
    天域           1 - 31                       ``*`` ``-`` ``,`` ``/`` ``?`` ``L`` ``W`` ``C``
    月域           1 - 12 或 JAN - DEC           ``*`` ``-`` ``,`` ``/``
    周域           1 - 7 或 SUN - SAT            ``*`` ``-`` ``,`` ``/`` ``L`` ``C`` ``#``
    年域           空 或 1970 - 2099             ``*`` ``-`` ``,`` ``/``
    ============ ============================= ======================

常用符号
^^^^^^^^^^^^^^^^

- ``*``

    - 匹配该域的所有值。

- ``-``

    - 表示该域上的一个范围。
    - ``0 30 9-15 ? * * *`` 表示在每天的 09:30:00 - 15:30:00 内每小时执行一次。

- ``,``

    - 表示枚举值。
    - ``0 0 9,10 ? * * *`` 表示在每天的 09:00:00 和 10:00:00 各执行一次。

- ``/``

    - 表示起始时间和间隔时间。
    - ``0 0 3/5 * * ? *`` 表示每天 03:00:00 点开始执行，每隔 5 个小时执行一次，即 3 点、8 点、13 点、18 点、23 点各执行一次。
    - ``0 0 /5 * * ? *`` 表示每天 00:00:00 点开始执行，每隔 5 个小时执行一次。
    - ``0 0 0 /10 * ? *`` 表示每 10 天执行一次，每个月都在 1、11、21、31 号执行（注意：每个月的周期都是固定从 1 号开始）。

- ``?``

    - 用在天域或周域上，表示不确定值、不限制值。它与 ``*`` 的区别是，它并不能匹配到该域上的所有值，因为在同时指定某日和周几的时候，这两个值实际上是冲突的。
    - ``0 0 5 6 * ? *`` 表示每个月 6 日 05:00:00 执行而无论是周几。
    - ``0 0 5 ? * 3 *`` 表示每个周三 05:00:00 执行而无论是几号。

- ``L``

    - 用在天域或周域上：用于天域时表示当月最后一天；用于周域时，如果前面不加数字则表示周六，加数字表示最后一个周值。
    - ``0 0 23 L * ? *`` 表示每月最后一天的 23:00:00 执行。
    - ``0 0 23 ? * L *`` 表示每周六的 23:00:00 执行， ``0 0 23 ? * 3L *`` 表示每月最后一个周二的 23:00:00 点执行。

- ``#``

    - 用在周域上，表示第几个周几执行。
    - ``15 30 6 ? * 7#5 *`` 表示每个月第 5 个周六的 06:30:15 执行，如果某个月不存在第 5 个周六，则跳过。

crontab
---------------

Linux 的 crontab 用于定时任务调度。

安装与配置
------------

安装
^^^^^^^^^

::

    apt-get install cron

查看 ``/etc/crontab`` ：

.. code-block:: text
    :linenos:

    # cat /etc/crontab
    # /etc/crontab: system-wide crontab
    # Unlike any other crontab you don't have to run the `crontab'
    # command to install the new version when you edit this file
    # and files in /etc/cron.d. These files also have username fields,
    # that none of the other crontabs do.

    SHELL=/bin/bash
    PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

    # Example of job definition:
    # .---------------- minute (0 - 59)
    # |  .------------- hour (0 - 23)
    # |  |  .---------- day of month (1 - 31)
    # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
    # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
    # |  |  |  |  |
    # *  *  *  *  * user-name command to be executed
    17 *	* * *	root    cd / && run-parts --report /etc/cron.hourly
    25 6	* * *	root	test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
    47 6	* * 7	root	test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
    52 6	1 * *	root	test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )

该文件配置了 **系统级** 定时任务所使用的环境变量 ``SHELL`` 和 ``PATH``。
对于系统级 crontab，在 cron 表达式和命令之间，多了一个 use-name 域。

服务
^^^^^^^^^^^

定时任务依赖 cron 服务。

- 启动服务： ``service cron start``

- 查询服务状态： ``service cron status``

- 停止服务： ``service cron stop``

- 重启服务： ``service cron restart``


指令
^^^^^^^^^^^

::

    crontab [ -u user ] { -l | -r | -e }


- ``crontab -l``

    - 查看定时任务列表。
    - 定时任务保存在文件 ``/var/spool/cron/crontabs/<user-name>`` 。

- ``crontab –e``

    - 编辑定时任务::

        *    *    *    *    *  command
  
    - 定时任务保存在文件 ``/var/spool/cron/crontabs/<user-name>`` 。

- ``crontab –r``

    - 删除定时任务。
    - ``crontab –r -i`` 删除前询问。 

.. note::

    对于用户级的 crontab，如果定时任务未启动，可能是因为所要执行的命令找不到，因为 crontab 读到的 ``PATH`` 变量不一定与用户的 ``PATH`` 相同，此时应该使用命令的绝对路径，比如 ``/usr/local/bin/python`` 。也可以在命令前定义 ``PATH``::

        *    *    *    *    *  PATH=$PATH:/usr/local/bin; command


日志
^^^^^^^^^^^^^

首先需要安装并启动 rsyslog 服务::

    apt-get install rsyslog
    service rsyslog start

crontab 的日志配置保存在 ``/etc/rsyslog.conf`` 或 ``/etc/rsyslog.d/50-default.conf`` 。
在配置文件中将 cron 对应的那行取消注释::

    cron.*				/var/log/cron.log

crontab 的日志保存在 ``/var/log/cron.log`` 。


表达式
-------------

.. code-block:: text

    *    *    *    *    *  command to be executed
    ┬    ┬    ┬    ┬    ┬
    │    │    │    │    └─  Day of Week   (0=Sun .. 6=Sat)
    │    │    │    └──────  Month         (1..12)
    │    │    └───────────  Day of Month  (1..31)
    │    └────────────────  Hour          (0..23)
    └─────────────────────  Minute        (0..59)

.. table:: 域和取值范围、可用符号
    :align: center

    ================ ============================= ======================
    Field             Range                        Special characters
    ================ ============================= ======================
    Minute      	  0 - 59	                    ``,`` ``-`` ``*`` ``/``
    Hour	          0 - 23	                    ``,`` ``-`` ``*`` ``/``
    Day of Month      1 - 31	                    ``,`` ``-`` ``*`` ``/`` ``?`` ``L`` ``W``
    Month	          1 - 12	                    ``,`` ``-`` ``*`` ``/``
    Day of Week	      0 - 6	                        ``,`` ``-`` ``*`` ``/`` ``?`` ``L`` ``#``
    ================ ============================= ======================

参考资料
---------------

1. 在线Cron表达式生成器

  https://cron.qqe2.com/

  https://www.matools.com/cron/

2. cron表达式的用法

  https://www.cnblogs.com/dubhlinn/p/10740838.html

3. Cron Expressions

  https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm

4. Cron cheatsheet

  https://quickref.me/cron

5. 在线 crontab 表达式

  https://crontab.guru/

6. Why crontab scripts are not working?

  https://askubuntu.com/questions/23009/why-crontab-scripts-are-not-working