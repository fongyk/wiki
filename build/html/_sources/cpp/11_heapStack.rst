堆、栈
========

堆（Heap）与栈（Stack）有两层含义：
（1）程序内存布局场景下，堆与栈表示的是两种内存管理方式；
（2）数据结构场景下，堆与栈表示两种常用的数据结构。

栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。

堆由程序员分配释放， 若程序员不释放，程序结束时由系统回收。


管理方式
----------

栈由操作系统自动分配释放，无需我们手动控制；

堆的申请和释放工作由程序员控制，容易产生内存泄漏。


空间大小
------------

每个进程拥有的栈的大小要远远小于堆的大小。
理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小64bits的Windows默认1MB，64bits的Linux默认10MB；


分配方式
-------------

堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。

动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。


生长方式
--------------

堆的生长方向向上，内存地址由低到高。

栈的生长方向向下，内存地址由高到低。


分配效率
-----------

栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。

堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。


存放内容
--------------

栈存放函数返回地址、相关参数、局部变量和寄存器内容等。

堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。


附：内存分区
-------------------

在C++中，内存主要分为堆、栈、全局/静态存储区和常量存储区。

- **栈** ：就是那些由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区。里面的变量通常是局部变量、函数参数等。

- **堆** ：就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。

- **全局/静态存储区** ：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。

- **常量存储区** ：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。

参考资料
-----------

1. 堆与栈的区别

  https://blog.csdn.net/K346K346/article/details/80849966

2. C/C++——堆栈的讲解

  https://blog.csdn.net/lovejay7/article/details/80662390

3. C++ 自由存储区是否等价于堆？

  https://www.cnblogs.com/QG-whz/p/5060894.html
